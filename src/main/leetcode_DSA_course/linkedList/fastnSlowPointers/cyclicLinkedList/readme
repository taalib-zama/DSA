Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously
following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is
connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.


Approach 1 : iterate the LL and see if the dummy.next  = head (head is the actual head of LL). Dumy is the itertaor pointer.

Approach 2 : using fast and slow pointer :
     move a fast pointer twice the speed of a slow pointer. If they ever meet (except at the start),
     then we know there must be a cycle. If the fast pointer reaches the end of the linked list, then
     there isn't a cycle.


    the fast and slow pointer should meet up somewhere in the cycle, if the meet this means there is a loop.