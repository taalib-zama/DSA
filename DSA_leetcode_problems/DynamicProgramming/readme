Dynamic Programming is a technique in computer programming that helps to efficiently solve a class of problems
that have overlapping sub-problems and optimal substructure property.

If any problem can be divided into sub-problems, which in turn are divided into smaller sub-problems,
and if there are overlapping among these sub-problems, then the solutions to these sub-problems can be
saved for future reference. In this way, efficiency of the CPU can be enhanced.
This method of solving a solution is referred to as dynamic programming.


memorization : Dynamic programming works by storing the result of sub-problems so that when their solutions are required,
 they are at hand and we do not need to recalculate them.

               This technique of storing the value of sub-problems is called memoization.
               By saving the values in the array, we save time for computations of sub-problems we
               have already come across.
    var m = map(0 → 0, 1 → 1)
    function fib(n)
        if key n is not in map m
            m[n] = fib(n − 1) + fib(n − 2)
        return m[n]
===================================================================================================
Dynamic programming by memorization is a top-down approach to dynamic programming. By reversing the direction in which
the algorithm works i.e. by starting from the base case and working towards the solution, we can also implement dynamic
 programming in a bottom-up manner.
    function fib(n)
         if n = 0
             return 0
         else
             var prevFib = 0, currFib = 1
             repeat n − 1 times
                 var newFib = prevFib + currFib
                 prevFib = currFib
                 currFib  = newFib
         return currentFib


======================================================================================================
Dynamic programming is mostly applied to recursive algorithms. This is not a coincidence,
 most optimization problems require recursion and dynamic programming is used for optimization.
 But not all problems that use recursion can use Dynamic Programming. Unless there is a presence of
 overlapping subproblems like in the fibonacci sequence problem,
 a recursion can only reach the solution using a divide and conquer approach
=====================================================================================================


